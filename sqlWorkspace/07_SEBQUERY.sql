--서브쿼리 (SUBQUERY)

/*
    <SUBQUERY>
        데이터베이스에 날리는 코드
        하나의 SQL 문 안에 포함된 또 다른 SQL 문을 뜻한다. 
        메인 쿼리(기존 쿼리)를 보조하는 역할을 하는 쿼리문이다.
*/

--노홍철 사원과 같은 부서원 조회
SELECT *
FROM EMPLOYEE
WHERE EMP_NAME = '노옹철';

SELECT *
FROM EMPLOYEE                               
WHERE DEPT_CODE =
(
SELECT DEPT_CODE
FROM EMPLOYEE
WHERE EMP_NAME = '노옹철'
);
/*
    <서브 쿼리 구분>
        서브 쿼리는 서브 쿼리를 수행한 결과값의 행과 열의 개수에 따라서 분류할 수 있다.
        
        1) 단일행 단일열 서브 쿼리  : 서브 쿼리의 조회 결과 값의 행과 열의 개수가 1개 일 때
        2) 다중행 서브 쿼리        : 서브 쿼리의 조회 결과 값의 행의 개수가 여러 행 일 때
        3) 다중열 서브 쿼리        : 서브 쿼리의 조회 결과 값이 한 행이지만 칼럼이 여러개 일때
        4) 다중행, 다중열 서브 쿼리 : 서브 쿼리의 조회 결과 값이 여러행, 여러열 일 때
        
        * 서브 쿼리의 유형에 따라서 서브 쿼리 앞에 붙는 연산자가 달라진다.
        
    <단일행 서브 쿼리>
        서브 쿼리의 조회 결과 값의 행과 열의 개수가 1개 일 때 (단일행, 단일열)
        비교 연산자(단일행 연산자) 사용 가능 (=, !=, <>, ^=, >, <, >=, <=, ...)
*/


-- 1) 전 직원의 평균 급여보다 급여를 적게 받는 직원들의 이름, 직급 코드, 급여 조회
SELECT AVG(SALARY)
FROM EMPLOYEE;

SELECT 
    EMP_NAME
    ,JOB_CODE
    ,SALARY
FROM EMPLOYEE
WHERE SALARY <
(
    SELECT AVG(SALARY)
    FROM EMPLOYEE
);

-- 2) 최저 급여를 받는 직원의 사번, 이름, 직급 코드, 급여, 입사일 조회
SELECT *
FROM EMPLOYEE
WHERE SALARY = (
                    SELECT MIN(SALARY)
                    FROM EMPLOYEE
                )
                ;
    
-- 3) 노옹철 사원의 급여보다 더 많은 급여받는 사원들의 사번, 사원명, 부서명, 직급 코드, 급여 조회
SELECT 
    EMP_NAME
    ,DEPT_TITLE
    ,JOB_CODE
    ,SALARY
FROM EMPLOYEE E
JOIN DEPARTMENT D
ON E.DEPT_CODE =D.DEPT_ID
WHERE SALARY > (
               SELECT SALARY
                FROM EMPLOYEE
                WHERE EMP_NAME = '노옹철'
                )
                ;
    
-- 4) 부서별 급여의 합이 가장 큰 부서의 부서 코드, 급여의 합 조회
SELECT SUM(SALARY)
        ,DEPT_CODE
FROM EMPLOYEE
GROUP BY DEPT_CODE
HAVING SUM(SALARY) = ( 
        SELECT MAX(SUM(SALARY))
        FROM EMPLOYEE
        GROUP BY DEPT_CODE)
;

-- 5) 전지연 사원이 속해있는 부서원들 조회 (단, 전지연 사원은 제외)
SELECT *
FROM EMPLOYEE
WHERE DEPT_CODE = (
        SELECT DEPT_CODE
        FROM EMPLOYEE
        WHERE EMP_NAME = '전지연'
        );

/*
    <다중행 서브 쿼리>
        서브 쿼리의 조회 결과 값의 행의 개수가 여러 행 일 때
        
        IN / NOT IN (서브 쿼리) : 여러 개의 결과값 중에서 한 개라도 일치하는 값이 있다면 혹은 없다면 TRUE를 리턴한다.
        ANY : 여러 개의 값들 중에서 한 개라도 만족하면 TRUE, IN과 다른 점은 비교 연산자를 함께 사용한다는 점이다. 
            ANY(100, 200, 300)
            SALARY = ANY(...)  : IN과 같은 결과
            SALARY != ANY(...) : NOT IN과 같은 결과
            SALARY > ANY(...)  : 최소값 보다 크면 TRUE
            SALARY < ANY(...)  : 최대값 보다 작으면 TRUE
        ALL : 여러 개의 값들 모두와 비교하여 만족해야 TRUE, IN과 다른 점은 비교 연산자를 함께 사용한다는 점이다.
            ALL(100, 200, 300)
            SALARY > ALL(...)  : 최대값 보다 크면 TRUE
            SALARY < ALL(...)  : 최소값 보다 작으면 TRUE
*/
    
-- 1) 각 부서별 최고 급여를 받는 직원의 이름, 직급 코드, 부서 코드, 급여 조회
SELECT MAX(SALARY)
FROM EMPLOYEE
GROUP BY DEPT_CODE;


SELECT EMP_NAME
    ,JOB_CODE
    ,DEPT_CODE
    ,SALARY
FROM EMPLOYEE
WHERE SALARY IN (
            SELECT MAX(SALARY)
            FROM EMPLOYEE
            GROUP BY DEPT_CODE
            );
            
-- 전 직원들에대해 사번 , 이름 , 부서코드 , 구분(사수/사원)
SELECT *
FROM EMPLOYEE;

SELECT 
        EMP_ID 사번
        ,EMP_NAME 직원이름
        ,DEPT_CODE 부서코드
        ,CASE 
        WHEN EMP_ID IN (
                    SELECT DISTINCT(MANAGER_ID)
                    FROM EMPLOYEE
                    WHERE MANAGER_ID IS NOT NULL
                   ) THEN '사수'  
        ELSE '사원'
        END AS 구분
FROM EMPLOYEE ;

-- 3) 대리 직급임에도 과장 직급들의 최소 급여보다 많이 받는 직원의 사번, 이름, 직급명, 급여 조회
SELECT
    EMP_ID
    ,EMP_NAME
    ,JOB_NAME
    ,SALARY
FROM EMPLOYEE E
JOIN JOB J
ON E.JOB_CODE = J.JOB_CODE
WHERE J.JOB_CODE = 'J6'
AND SALARY > ANY(
                    SELECT SALARY
                    FROM EMPLOYEE E
                    JOIN JOB J
                    ON E.JOB_CODE = J.JOB_CODE
                    WHERE JOB_NAME = '과장');
--ANY 하나라도 통과
--ALL전체다
SELECT E.EMP_ID, E.EMP_NAME, J.JOB_NAME, E.SALARY
FROM EMPLOYEE E
JOIN JOB J ON (E.JOB_CODE = J.JOB_CODE)
WHERE J.JOB_NAME = '과장'
  AND SALARY > ALL(
    SELECT E.SALARY
    FROM EMPLOYEE E
    JOIN JOB J ON (E.JOB_CODE = J.JOB_CODE)
    WHERE J.JOB_NAME = '차장'
  ); 
  
  /*
    <다중열 서브 쿼리>
        조회 결과 값은 한 행이지만 나열된 칼럼 수가 여러 개일 때
*/

SELECT SALARY
FROM EMPLOYEE E
JOIN JOB J
ON E.JOB_CODE = J.JOB_CODE
WHERE JOB_NAME = '과장';

SELECT *
FROM EMPLOYEE
WHERE (DEPT_CODE, JOB_CODE) = (
                                    SELECT DEPT_CODE, JOB_CODE
                                    FROM EMPLOYEE
                                    WHERE EMP_NAME ='하이유'
                                )
;

-- 2) 박나라 사원과 직급 코드가 일치하면서 같은 사수를 가지고 있는 사원의 사번, 이름, 직급 코드, 사수 사번, 조회
SELECT EMP_ID, EMP_NAME, JOB_CODE, MANAGER_ID
FROM EMPLOYEE
WHERE (JOB_CODE, MANAGER_ID) = (
    SELECT JOB_CODE, MANAGER_ID
    FROM EMPLOYEE
    WHERE EMP_NAME = '박나라'
);

/*
    <다중행 다중열 서브 쿼리>
        서브 쿼리의 조회 결과값이 여러 행, 여러 열일 경우
*/

-- 1. 각 직급별로 최소 급여를 받는 사원들의 사번, 이름, 직급 코드, 급여 조회
SELECT EMP_ID, EMP_NAME, JOB_CODE, SALARY
FROM EMPLOYEE
WHERE (JOB_CODE, SALARY) IN (
    SELECT JOB_CODE, MIN(SALARY)
    FROM EMPLOYEE
    GROUP BY JOB_CODE
);

/*
    <인라인 뷰>
        FROM 절에 서브 쿼리를 제시하고, 서브 쿼리를 수행한 결과를 테이블 대신 사용한다.
*/



--오라클에서 제공하는 칼럼, 조회된 순서대로 1 부터 순번을 부여하는 칼럼
--TOP-N번 분석(급여상위 N명 분석)

SELECT *
FROM
(

             SELECT T.EMP_NAME,T.SALARY,ROWNUM AS RNUM
             FROM 
            (
            SELECT *
            FROM EMPLOYEE
            ORDER BY SALARY DESC
            )T

)
WHERE RNUM BETWEEN 3 AND 7
;
--로우넘이 만들어지는 타이밍때문에 ROWNUM < 6 이런식으로 비교하면 안나온다
-- 로우넘이 매겨지는 타이밍은 테이블을 가져올때

--TOP-N 분석

WITH ABC AS 
(
    SELECT EMP_NAME , SALARY
    FROM EMPLOYEE
    ORDER BY SALARY DESC 
)
SELECT*
FROM ABC
WHERE ROWNUM <= 10;

--TOP-N 분석 --RANK
/*
    <RANK 함수>
        [문법]
        RANK() OVER(정렬 기준) / DENSE_RANK() OVER(정렬 기준)
        
         RANK() OVER(정렬 기준)         : 동일한 순위 이후의 등수를 동일한 인원수만큼 건너뛰고 순위를 계산한다.
                                         (EX. 공동 1위가 2명이면 다음 순위는 3위)
         DENSE_RANK() OVER(정렬 기준)   : 동일한 순위 이후의 등수를 무조건 1씩 증가한다.
                                         (EX. 공동 1위가 2명이면 다음 순위는 2위)
*/

SELECT  EMP_ID 
        ,EMP_NAME 
        ,SALARY
        ,DENSE_RANK()OVER(ORDER BY SALARY DESC) AS 순위
FROM EMPLOYEE
;